Spring Framwork 실습
------------------------------------------------------------------------------------------------------------
1. 스프링 Ioc/DI 개념 이해를 위해 Spring Project 생성
------------------------------------------------------------------------------------------------------------
  1) 프로젝트 생성 방법 2가지
     - start.spring.io에서 생성 후 이클립스 Gradle 임포트 (IDE에 의존하지 않는 프로젝트 생성)
     - STS4 이클립스 플러그인 설치 및 생성
  2) STS4 프로젝트 생성
     - 그룹명 : namoo
     - 프로젝트명 : spring_base
     - 패키지명 : ezen.springbasic
     - 디펜던시 : 없음
     - 생성 후 reflesh Gradle Project
---------------------------------------------------------------------------------------------------------------------------------
2. 실습을 위해 ezen.springbasic.core 패키지에 Weapon, Gun, Unit, Marine 작성
---------------------------------------------------------------------------------------------------------------------------------
public interface Weapon {
	public void attack();
}

public class Gun implements Weapon {

	@Override
	public void attack() {
		System.out.println("장총으로 공격합니다.");
	}

}

public interface Unit {
	public void offense();
}

public class Marine implements Unit {
	private Weapon weapon;
	
	public Marine() {}

	public Marine(Weapon weapon) {
		this.weapon = weapon;
	}

---------------------------------------------------------------------------------------------------------------------------------
3. SpringFrame 지원 없이 기존에 작성했던 Application 클래스 작성 및 테스트
---------------------------------------------------------------------------------------------------------------------------------
public class ClassicApplication {

	public static void main(String[] args) {
		Weapon weapon = new Gun();
		Unit unit = new Marine(weapon);
		unit.offense();
	}
}

[문제점] : 인터페이스를 이용하여 다형성 원리를 잘 적용하여 역할과 구현을 분리하여 잘 구현하였지만 객체 생성 및 관계 설정코드 분리 안됨
[개선] : 애플리케이션의 전체 동작방식을 구성하는 별도의 설정 클래스 작성
          애플리케이션에 관계된 객체 생성 및 관계 설정을 책임지는 별도의 조립 역할을 하는 클래스 작성 (팩토리)

---------------------------------------------------------------------------------------------------------------------------------
4. 애플리케이션에 관계된 구현 객체 생성 및 관계 설정을 책임지는 별도의 조립 클래스 작성
---------------------------------------------------------------------------------------------------------------------------------
public class AppConfig {
	
	public Weapon weapon() {
		return new Gun();
	}
	
	public Unit unit() {
		return new Marine(weapon());
	}
}

---------------------------------------------------------------------------------------------------------------------------------
5. 테스트를 위한 Application 클래스 작성     (AppConfig는 컨테이너 역할)
---------------------------------------------------------------------------------------------------------------------------------
public class AdvancedApplication {

	public static void main(String[] args) {
		AppConfig appConfig = new AppConfig();
		Unit unit = appConfig.unit();
		unit.offense();
	}
}


========================================================================================
▣▣▣ 스프링으로 전환 ▣▣▣
----------------------------------------------------------------------------------------------------------------------------------------------------------
6. 스프링 기반 Ioc/DI 적용 애플리케이션으로 변경
----------------------------------------------------------------------------------------------------------------------------------------------------------
■  AppConfig 클래스를 직접 생성하는 것이 아니라 스프링 빈 컨테이너의 빈으로 생성하고 등록하기 위해 @Configration, @Bean 어노테이션 사용하여 객체 생성
// 스프링컨테이너는 @Configuration이 붙은 클래스를 생성하고 설정 정보 객체로 사용
@Configuration
public class AppConfig {
	
	//@Bean이 붙은 메소드를 호출하여 반환되는 객체를 스프링 컨테이너에 빈으로 등록
	// 메소드 이름을 등록하는 빈의 이름으로 사용
	@Bean
	public Weapon weapon() {
		return new Gun();
	}
	
	@Bean
	public Unit unit() {
		return new Marine(weapon());
	}
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
7. 스프링 컨테이너를 생성하고 실행하는 Spring Application 작성 및 테스트
----------------------------------------------------------------------------------------------------------------------------------------------------------
스프링 컨테이너의 이름으로 AnnotationCongifApplicationContext (XML, Annotation, JavaChord에 따라 인터페이스)
public class SpringApplication {
	public static void main(String[] args) {
		// 에노테이션을 지원하는 스프링컨테이너 생성
		ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);
		//컨테이너에서 관리하고 있는 Map 안의 객체에서 가져오는 과정
		// 빈 이름으로 조회
		Unit unit = (Unit)applicationContext.getBean("unit");
		// 빈 타입으로 조회
		Unit unit = applicationContext.getBean(Unit.class);
		// 이름과 타입으로 조회
		Unit unit = applicationContext.getBean("unit", Unit.class);
		unit.offense();
		
		Unit unit2 = applicationContext.getBean("unit", Unit.class);
		System.out.println(unit == unit2);
		// 스프링 빈 컨테이너는 빈을 싱글톤으로 관리하는 것을 짐작할 수 있다.
	}
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
8. 스프링은 설정 정보 없어도 자동으로 스프링 객체(빈)를 생성하고 등록하는 스프링 컴포넌트 스캔 기능과 의존관계 자동 주입을 지원한다.
----------------------------------------------------------------------------------------------------------------------------------------------------------
@ComponentScan(basePackages = "ezen.springbasic.core")
// basePackages 생략하면 AppConfig가 존재하는 패키지
public class AppConfig {
// 특별 설정 필요 없다.	
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
9. Annotation을 이용하여 빈 생성 및 스프링 컨테이너에 등록 : 클래스 선언부에 @Component 어노테이션 선언
----------------------------------------------------------------------------------------------------------------------------------------------------------
@Component
public class Gun implements Weapon {

	@Override
	public void attack() {
		System.out.println("장총으로 공격합니다.");
	}

}

@Component
public class Marine implements Unit {
	@Autowired    (의존관계 주입)
	//@Qualifier("sword")	(weapon타입이 여러개라서 하나를 지정 해 줘야한다.)
	private Weapon weapon;
	public Marine() {}

	public Marine(Weapon weapon) {
		this.weapon = weapon;
	}


----------------------------------------------------------------------------------------------------------------------------------------------------------
10. 테스트를 위한 애플리케이션 클래스 작성 및 테스트
----------------------------------------------------------------------------------------------------------------------------------------------------------
public class SpringApplication2 {
	public static void main(String[] args) {
		// 에노테이션을 지원하는 스프링컨테이너 생성
		ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);
		// 중략
	}
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
10. JUnit 테스트 클래스 작성 및 테스트
----------------------------------------------------------------------------------------------------------------------------------------------------------
public class SpringApplicationTest {
	
	ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig2.class);
	
	@Test
	public void attackTest() {
		Unit unit = applicationContext.getBean(Unit.class);
		unit.offense();
	}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
11. JUnit이 지원하는 @SpringBootTest 어노테이션을 이용하여 스프링 부트 실행(스프링 컨테이너 생성) 및 테스트
     Test 클래스 컨테이너에 등록 및 의존하는 객체 주입
----------------------------------------------------------------------------------------------------------------------------------------------------------
@SpringBootTest
public class SpringApplicationTest2 {                         //테스트클래스도 빈으로 등록된다.
	
	@Autowired
	Unit unit;
	
	@Test
	public void attackTest() {
		unit.offense();
	}

}

----------------------------------------------------------------------------------------------------------------------------------------------------------
12. 다양한 의존관계 자동 주입방법
---------------------------------------------------------------------------------------------------------------------------------------------------------- 
의존관계 주입은 크게 4가지 방법이 있다.
필드 주입
생성자 주입
setter 주입
일반 메서드 주입 (스프링은 지원안함)

○ 생성자 주입 (가장 권장)
이름 그대로 생성자를 통해서 의존 관계를 주입 받는 방법이다.
특징
생성자 호출시점에 딱 1번만 호출되는 것이 보장된다.
불변, 필수 의존관계에 사용

GuestbookService, GuestbookServiceImpl, GuestbookRepository, JdbcGuestbookRepository, GuestbookServiceTest 클래스 작성
---------------------------------------------------------------------------------------------------------------------------------------------------------- 
public class Guestbook {
	private String writer;
	private String message;
	
	public Guestbook() {
	}

	public Guestbook(String writer, String message) {
		this.writer = writer;
		this.message = message;
	}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------- 
public interface GuestbookRepository {
	
	public void create(Guestbook guestbook);
	public List<Guestbook> findAll();

}
---------------------------------------------------------------------------------------------------------------------------------------------------------- 
@Repository
public class JdbcGuestbookRepository implements GuestbookRepository {

	@Override
	public void create(Guestbook guestbook) {
		System.out.println(guestbook.toString() + "등록 완료");
	}

	@Override
	public List<Guestbook> findAll() {
		List<Guestbook> list = new ArrayList<Guestbook>();
		list.add(new Guestbook("멍게", "멍게 맛있습니다."));
		list.add(new Guestbook("꼴뚜기", "꼴뚜기 맛있습니다."));
		return list;
	}

}
---------------------------------------------------------------------------------------------------------------------------------------------------------- 
public interface GuestbookService {
	public void register(Guestbook guestbook);
	public List<Guestbook> findGuestbooks();
}
---------------------------------------------------------------------------------------------------------------------------------------------------------- 
@Service
public class GuestbookServiceImpl implements GuestbookService {
	
	// 필드 Injection
	//@Autowired
	private final GuestbookRepository guestbookRepository;
	
	// 생성자 Injection (권장)
	@Autowired
	// 생성자가 딱 1개만 있으면 @Autowired 를 생략할 수 있다
	public GuestbookServiceImpl(GuestbookRepository guestbookRepository) {
		this.guestbookRepository = guestbookRepository;
	}

	@Override
	public void register(Guestbook guestbook) {
		guestbookRepository.create(guestbook);		
	}

	@Override
	public List<Guestbook> findGuestbooks() {
		return guestbookRepository.findAll();
	}

}
---------------------------------------------------------------------------------------------------------------------------------------------------------- 
@SpringBootTest
public class GuestbookServiceTest {
	
	@Autowired
	GuestbookService guestbookService;
	
	@Test
	public void registerTest() {
		guestbookService.register(new Guestbook("방그리", "테스트입니다."));
		List<Guestbook> list = guestbookService.findGuestbooks();
		System.out.println(list.toString());
	}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------- 
